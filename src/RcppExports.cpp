// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// QS_Weights_cpp
arma::vec QS_Weights_cpp(arma::vec x);
RcppExport SEXP _MultiHorizonSPA_QS_Weights_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(QS_Weights_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// QS_cpp
arma::vec QS_cpp(arma::mat y);
RcppExport SEXP _MultiHorizonSPA_QS_cpp(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(QS_cpp(y));
    return rcpp_result_gen;
END_RCPP
}
// Get_MBB_ID_cpp
arma::uvec Get_MBB_ID_cpp(int TT, int L);
RcppExport SEXP _MultiHorizonSPA_Get_MBB_ID_cpp(SEXP TTSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_MBB_ID_cpp(TT, L));
    return rcpp_result_gen;
END_RCPP
}
// MBB_Variance_cpp
arma::vec MBB_Variance_cpp(arma::mat y, int L);
RcppExport SEXP _MultiHorizonSPA_MBB_Variance_cpp(SEXP ySEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(MBB_Variance_cpp(y, L));
    return rcpp_result_gen;
END_RCPP
}
// Bootstrap_aSPA_cpp
arma::field<arma::vec> Bootstrap_aSPA_cpp(arma::mat Loss_Diff, arma::vec weights, int L, int B);
RcppExport SEXP _MultiHorizonSPA_Bootstrap_aSPA_cpp(SEXP Loss_DiffSEXP, SEXP weightsSEXP, SEXP LSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Loss_Diff(Loss_DiffSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Bootstrap_aSPA_cpp(Loss_Diff, weights, L, B));
    return rcpp_result_gen;
END_RCPP
}
// Bootstrap_uSPA_cpp
arma::field<arma::vec> Bootstrap_uSPA_cpp(arma::mat Loss_Diff, int L, int B);
RcppExport SEXP _MultiHorizonSPA_Bootstrap_uSPA_cpp(SEXP Loss_DiffSEXP, SEXP LSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Loss_Diff(Loss_DiffSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Bootstrap_uSPA_cpp(Loss_Diff, L, B));
    return rcpp_result_gen;
END_RCPP
}
// Test_aSPA_cpp
List Test_aSPA_cpp(NumericMatrix LossDiff, NumericVector weights, int L, int B);
RcppExport SEXP _MultiHorizonSPA_Test_aSPA_cpp(SEXP LossDiffSEXP, SEXP weightsSEXP, SEXP LSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type LossDiff(LossDiffSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Test_aSPA_cpp(LossDiff, weights, L, B));
    return rcpp_result_gen;
END_RCPP
}
// Test_uSPA_cpp
List Test_uSPA_cpp(NumericMatrix LossDiff, int L, int B);
RcppExport SEXP _MultiHorizonSPA_Test_uSPA_cpp(SEXP LossDiffSEXP, SEXP LSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type LossDiff(LossDiffSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Test_uSPA_cpp(LossDiff, L, B));
    return rcpp_result_gen;
END_RCPP
}
// MultiHorizonMCS_cpp
List MultiHorizonMCS_cpp(List Losses, double alpha_t, double alpha_mcs, NumericVector weights, int L, int B, int unif_or_avg, int ncores);
RcppExport SEXP _MultiHorizonSPA_MultiHorizonMCS_cpp(SEXP LossesSEXP, SEXP alpha_tSEXP, SEXP alpha_mcsSEXP, SEXP weightsSEXP, SEXP LSEXP, SEXP BSEXP, SEXP unif_or_avgSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Losses(LossesSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_t(alpha_tSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_mcs(alpha_mcsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type unif_or_avg(unif_or_avgSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(MultiHorizonMCS_cpp(Losses, alpha_t, alpha_mcs, weights, L, B, unif_or_avg, ncores));
    return rcpp_result_gen;
END_RCPP
}
// get_original_arma
arma::vec get_original_arma(double low, double high, double sp_low, double sp_high, arma::vec sum_preds);
RcppExport SEXP _MultiHorizonSPA_get_original_arma(SEXP lowSEXP, SEXP highSEXP, SEXP sp_lowSEXP, SEXP sp_highSEXP, SEXP sum_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type sp_low(sp_lowSEXP);
    Rcpp::traits::input_parameter< double >::type sp_high(sp_highSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sum_preds(sum_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_original_arma(low, high, sp_low, sp_high, sum_preds));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MultiHorizonSPA_QS_Weights_cpp", (DL_FUNC) &_MultiHorizonSPA_QS_Weights_cpp, 1},
    {"_MultiHorizonSPA_QS_cpp", (DL_FUNC) &_MultiHorizonSPA_QS_cpp, 1},
    {"_MultiHorizonSPA_Get_MBB_ID_cpp", (DL_FUNC) &_MultiHorizonSPA_Get_MBB_ID_cpp, 2},
    {"_MultiHorizonSPA_MBB_Variance_cpp", (DL_FUNC) &_MultiHorizonSPA_MBB_Variance_cpp, 2},
    {"_MultiHorizonSPA_Bootstrap_aSPA_cpp", (DL_FUNC) &_MultiHorizonSPA_Bootstrap_aSPA_cpp, 4},
    {"_MultiHorizonSPA_Bootstrap_uSPA_cpp", (DL_FUNC) &_MultiHorizonSPA_Bootstrap_uSPA_cpp, 3},
    {"_MultiHorizonSPA_Test_aSPA_cpp", (DL_FUNC) &_MultiHorizonSPA_Test_aSPA_cpp, 4},
    {"_MultiHorizonSPA_Test_uSPA_cpp", (DL_FUNC) &_MultiHorizonSPA_Test_uSPA_cpp, 3},
    {"_MultiHorizonSPA_MultiHorizonMCS_cpp", (DL_FUNC) &_MultiHorizonSPA_MultiHorizonMCS_cpp, 8},
    {"_MultiHorizonSPA_get_original_arma", (DL_FUNC) &_MultiHorizonSPA_get_original_arma, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MultiHorizonSPA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
